name: Build and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
  repository_dispatch:
    types: [trigger-workflow]

permissions:
  contents: write
  deployments: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PNPM_VERSION: 9.x.x
  HASH_FILE: build_hash

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    if: ${{ github.event.head_commit.message != 'Update hash file' }}

    outputs:
      hash_content: ${{ steps.read_hash.outputs.hash_content }}
      hash_branch_exists: ${{ steps.check_branch.outputs.hash_branch_exists }}

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Check if hash-branch exists
        id: check_branch
        run: |
          git remote set-url origin https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          if git ls-remote --exit-code --heads origin hash-branch; then
            echo "hash_branch_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "hash_branch_exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout hash-branch
        if: ${{ steps.check_branch.outputs.hash_branch_exists == 'true' }}
        uses: actions/checkout@v4
        with:
          ref: hash-branch
          path: hash-branch
          fetch-depth: 0

      - name: Read HASH_FILE content
        id: read_hash
        if: ${{ steps.check_branch.outputs.hash_branch_exists == 'true' }}
        working-directory: hash-branch
        run: |
          content=$(cat ${{ env.HASH_FILE }} 2>/dev/null || echo "")
          echo "hash_content=$content" >> "$GITHUB_OUTPUT"

  check:
    name: Check Should Rebuild
    runs-on: ubuntu-latest
    needs: prepare
    outputs:
      should_build: ${{ steps.compare_hash.outputs.should_build }}

    steps:
      - uses: actions/checkout@v4
        with:
          repository: innei-dev/shiroi
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0
          lfs: true

      - name: Compare hashes
        id: compare_hash
        env:
          FILE_HASH: ${{ needs.prepare.outputs.hash_content }}
          HASH_BRANCH_EXISTS: ${{ needs.prepare.outputs.hash_branch_exists }}
        run: |
          if [ "$HASH_BRANCH_EXISTS" == "false" ]; then
            echo "should_build=true" >> "$GITHUB_OUTPUT"
          else
            current_hash=$(git rev-parse --short HEAD)
            if [ "$FILE_HASH" == "$current_hash" ]; then
              echo "should_build=false" >> "$GITHUB_OUTPUT"
            else
              echo "should_build=true" >> "$GITHUB_OUTPUT"
            fi
          fi

  build:
    name: Build artifact
    runs-on: ubuntu-latest
    needs: [prepare, check]
    if: |
      needs.prepare.outputs.hash_branch_exists == 'false' ||
      (needs.check.outputs.should_build == 'true' && needs.prepare.outputs.hash_branch_exists == 'true')

    strategy:
      matrix:
        node-version: [20.x]
    outputs:
      sha_short: ${{ steps.store_hash.outputs.sha_short }}

    steps:
      - uses: actions/checkout@v4
        with:
          repository: innei-dev/shiroi
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0
          lfs: true


      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install

      - name: Build project
        run: sh ./ci-release-build.sh

      - name: Store build hash
        id: store_hash
        run: |
          sha_short=$(git rev-parse --short HEAD)
          echo "sha_short=$sha_short" >> "$GITHUB_OUTPUT"

  deploy:
    name: Deploy artifact
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: release-artifact

      - name: Deploy to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          source: "release.zip"
          target: "/tmp/"

      - name: Run deployment script
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            # Your deployment commands here
            echo "Deployment completed"

  store_hash:
    name: Store Build Hash
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git remote set-url origin https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Create or checkout hash-branch
        id: create_branch
        env:
          HASH_BRANCH_EXISTS: ${{ needs.prepare.outputs.hash_branch_exists }}
        run: |
          if [ "$HASH_BRANCH_EXISTS" == "false" ]; then
            # Create new orphan branch
            git checkout --orphan hash-branch
            # Remove all files to start clean
            git rm -rf . || echo "No files to remove"
            # Create initial commit
            echo "Initial commit" > README.md
            git add README.md
            git commit -m "Initialize hash-branch"
            # Push the new branch 
            git push origin hash-branch
            echo "Branch created=true" >> "$GITHUB_OUTPUT"
          else
            # Checkout existing branch
            git fetch origin hash-branch
            git checkout hash-branch
            echo "Branch created=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Update hash file
        run: |
          echo "${{ needs.build.outputs.sha_short }}" > ${{ env.HASH_FILE }}
          git add ${{ env.HASH_FILE }}

      - name: Commit and push changes
        run: |
          git commit -m "Update build hash" || echo "No changes to commit"
          git push origin hash-branch
